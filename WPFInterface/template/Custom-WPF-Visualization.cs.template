using System;
using System.Windows.Controls;
using System.Windows;
using Core.Utilities;

using Core.Data;
using Core.Abstracts;

/*

INSTRUCTIONS






*/




/*
 *  Custom C#/WPF Visualization
 * 
 */
namespace Visualizations
{

    public class DataConfigurator : AbstractGenericVisualization<System.Windows.Controls.StackPanel, DataInterfaceGeneric<GenericDataStructure>>
    {
        /* ------------------------------------------------------------------*/
        // properties

        public override string Name { get { return "..."; } }


        /* ------------------------------------------------------------------*/
        // public functions

        public override bool ReCreate()
        {
            if (!_initialized)
            {
                Log.Default.Msg(Log.Level.Error, "Initialization required prior to execution");
                return false;
            }
            if (_created)
            {
                Log.Default.Msg(Log.Level.Warn, "Re-creating visualization");
                _created = false;
            }
            if (DataInterface.RequestDataCallback == null)
            {
                Log.Default.Msg(Log.Level.Error, "Missing request data callback");
                return false;
            }
            _timer.Start();


            GenericDataStructure data = null;
            if (!DataInterface.GetData(ref data))
            {
                Log.Default.Msg(Log.Level.Error, "Missing data");
                return false;
            }


            Content. ....

			// Place YOUR STUFF here...


            _timer.Stop();
            _created = true;
            return _created;
        }

        public override bool Update()
        {
            if (!_created)
            {
                Log.Default.Msg(Log.Level.Error, "Creation required prior to execution");
                return false;
            }

            GenericDataStructure data = null;
            if (!DataInterface.Set(ref data))
            {
                Log.Default.Msg(Log.Level.Error, "Missing data");
                return false;
            }

            update_metadata(data);

            return true;
        }

        /// <summary>
        /// DEBUG
        /// </summary>
        ~DataConfigurator()
        {
            Console.WriteLine("DEBUG - DTOR: DataConfigurator");
        }

        /* ------------------------------------------------------------------*/
        // private functions

        /// <summary>
        /// TODO
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void event_clicked(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            var sender_item = sender as ...;
            if (sender_item != null)
            {
                var meta_data = sender_item.Tag as MetaData;
                if (meta_data != null)
                {
                    meta_data.IsSelected = !meta_data.IsSelected;
                    update_metadata_at_index(_tree_root, meta_data);
                    return;
                }
            }
            Log.Default.Msg(Log.Level.Error, "Failed to read meta data of selected tree item");
        }

        /// <summary>
        /// TODO
        /// </summary>
        /// <param name="tree"></param>
        /// <param name="meta_data"></param>
		/*
        private void update_metadata_at_index(TreeViewItem tree, MetaData meta_data)
        {
            foreach (var treeobject in tree.Items)
            {
                var treeitem = treeobject as TreeViewItem;
                if (treeitem != null)
                {
                    // IsSeleceted TreeViewItem of value with index
                    if (treeitem.Name == ("index_" + meta_data.Index.ToString()))
                    {
                        treeitem.Header = meta_data.IsSelected.ToString();
                        return;
                    }
                    update_metadata_at_index(treeitem, meta_data);
                }
            }
        }
		*/

        /// <summary>
        /// TODO
        /// </summary>
        /// <param name="branch"></param>
		/*
        private void update_metadata(GenericDataStructure branch)
        {
            foreach (var b in branch.Branches)
            {
                update_metadata(b);
            }
            foreach (var entry in branch.Entries)
            {
                update_metadata_at_index(_tree_root, entry.MetaData);
            }
        }
		*/

        /* ------------------------------------------------------------------*/
        // private variables

		/*
        private TreeViewItem _tree_root = null;
		*/

    }
}

